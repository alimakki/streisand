---
- name: Create directories for clients
  file:
    path: "{{ tls_client_path }}/{{ client_name.stdout }}"
    state: directory
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate the private keys for the client certificates
  command: openssl genrsa -out client.key {{ tls_key_size }}
  args:
    chdir: "{{ tls_client_path }}/{{ client_name.stdout }}"
    creates: client.key
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Set the proper permissions on all private client keys
  file:
    path: "{{ ca_path }}"
    recurse: yes
    state: directory
    owner: root
    group: root
    mode: 0600

- name: Generate CSRs for the clients
  shell: >
    openssl req 
    -utf8
    -new
    -key client.key
    -out client.csr 
    -subj "{{ tls_request_subject }}/CN={{ client_name.stdout }}"
    -batch
    -config <(cat {{ ca_path }}/openssl.cnf <(printf "[client]\nsubjectAltName=DNS:{{ client_name.stdout }}"))
  args:
    chdir: "{{ tls_client_path }}/{{ client_name.stdout }}"
    creates: client.csr
    executable: bash
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate certificates for the clients
  shell: >
    openssl
    x509
    -CA {{ tls_ca }}.crt
    -CAkey {{ tls_ca }}.key
    -CAcreateserial
    -extensions client
    -extfile <(cat {{ ca_path }}/openssl.cnf <(printf "[client]\nsubjectAltName=DNS:{{ client_name.stdout }}"))
    -req -days {{ tls_days_valid }}
    -in client.csr
    -out client.crt
  args:
    chdir: "{{ tls_client_path }}/{{ client_name.stdout }}"
    creates: client.crt
    executable: bash
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
