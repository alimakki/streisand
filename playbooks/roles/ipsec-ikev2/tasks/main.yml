---
- name: Install LibreSwan
  include_role:
    name: libreswan

- name: Create the ikev2 certificates directory directory
  file:
    path: "{{ ikev2_path }}"
    owner: root
    group: root
    mode: 0750
    state: directory

- include_role:
    name: certificates
  vars:
    ca_path:            "{{ ikev2_path }}"
    tls_ca:             "{{ ikev2_ca }}"
    tls_client_path:    "{{ ikev2_path }}"
    vpn_name:           "ipsec_ikev2"
    generate_ca_server: yes
    generate_client:    yes
    generate_pkcs:      yes
    tls_key_size:                "{{ ikev2_key_size }}"
    tls_request_subject:         "{{ ikev2_request_subject }}"
    tls_server_common_name_file: "{{ ikev2_server_common_name_file }}"
    tls_sans:
      - "{{ streisand_ipv4_address }}"

- name: Register the IKEv2 server common name
  command: cat "{{ ikev2_server_common_name_file }}"
  register: ikev2_server_name
  changed_when: False

- name: Base64 encode the CA certificate
  shell: "cat {{ ikev2_path }}/ca.crt | openssl base64"
  register: ikev2_ca_base64
  changed_when: False

- name: Base64 encode the client PKCS12 file(s)
  command: "openssl base64 -in {{ ikev2_path }}/{{ client_name.stdout }}.p12"
  register: ikev2_clients_base64
  changed_when: False
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate a UUID for .mobileconfig root certificate
  command: uuid -v4
  register: ikev2_root_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig client PKCS12 certificate
  command: uuid -v4
  register: ikev2_client_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig vpn payload identifier
  command: uuid -v4
  register: ikev2_payload_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig managed vpn identifier
  command: uuid -v4
  register: ikev2_managed_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig config payload identifier
  command: uuid -v4
  register: ikev2_config_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig global identifier
  command: uuid -v4
  register: ikev2_global_mobileconfig_uuid
  changed_when: False

- name: Generate the iOS client mobileconfig file(s)
  template:
    src: ikev2.mobileconfig.j2
    dest: "{{ ikev2_path }}/{{ client_content[0].stdout }}/{{ client_content[0].stdout }}.mobileconfig"
    owner: root
    group: root
    mode: 0600
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ ikev2_clients_base64.results }}"
    - "{{ vpn_client_pkcs12_password_list.results }}"
  loop_control:
    loop_var: "client_content"
    label: "{{ client_content[0].item }}"

- name: Generate a password for the server p12 file
  shell: "{{ streisand_word_gen.psk }} > {{ ikev2_server_p12_password_file }}"
  args:
    creates: "{{ ikev2_server_p12_password_file }}"

- name: Set permissions on the server p12 password
  file:
    path: "{{ ikev2_server_p12_password_file }}"
    owner: root
    group: root
    mode: 0600

- name: Register the contents of server p12 password
  command: "cat {{ ikev2_server_p12_password_file }}"
  register: server_p12_password
  changed_when: False

- name: Generate a server p12 file
  command: >
    openssl pkcs12 -export
    -in {{ ikev2_path }}/server.crt
    -inkey {{ ikev2_path }}/server.key
    -name {{ ikev2_server_name.stdout }}
    -out {{ ikev2_path }}/{{ ikev2_server_name.stdout }}.p12
    -certfile {{ ikev2_path }}/ca.crt
    -passout pass:"{{ server_p12_password.stdout }}"
  creates: "{{ ikev2_path }}/{{ ikev2_server_name.stdout }}.p12"

- name: Add the CA public certificate to the NSS database
  command: "certutil -A -i {{ ikev2_path }}/ca.crt -n \"ca-certificate\" -k rsa -d sql:/etc/ipsec.d -t \"CT,,\""

- name: Add the client p12 file(s) to the NSS database
  expect:
    command: "ipsec import {{ ikev2_path }}/{{ client[0].stdout }}.p12"
    responses:
      "Enter password for PKCS12 file": "{{ client[1].stdout }}"
  with_together:
    - "{{ vpn_client_names.results }}" 
    - "{{ vpn_client_pkcs12_password_list.results }}"
  loop_control:
    loop_var: "client"
    label: "{{ client[0].item }}"

- name: Import the server p12 file into the NSS database
  expect:
    command: "ipsec import {{ ikev2_path }}/{{ ikev2_server_name.stdout }}.p12"
    responses:
      "Enter password for PKCS12 file": "{{ server_p12_password.stdout }}"

- name: Generate the IPsec-IKEv2 configuration file
  template:
    src: ipsec.conf.j2
    dest: /etc/ipsec.d/ikev2.conf
    owner: root
    group: root
    mode: 0600
  notify: Restart Libreswan

# Ensure ikev2 firewall rules are in place
- import_tasks: firewall.yml
