---
- hosts: localhost
  gather_facts: no
  remote_user: root
  become: yes
  pre_tasks:
    # NOTE(@alimakki): Due to key rotation, we pre-emptivley
    # add the Google linux apt signing key required by some
    # packages
    - name: Install the Google linux apt signing key
      shell: "{{ item }}"
      with_items:
        - "wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -"
        - "apt-get clean"
        - "apt-get update"

    - name:
      raw:  sudo apt update && apt install python python-apt aptitude -y

- hosts: localhost
  gather_facts: yes
  remote_user: root
  become: yes
  tasks:
    #- name: Install lxc ppa key
    #  apt_key:
    #    id: 7635B973
    #    url: "http://keyserver.ubuntu.com:11371/pks/lookup?op=get&search=0xD5495F657635B973"
    #    state: present

    # If l2tp is enabled we need to build & prepare the Libreswan kernel module
    # on the localhost in order for it to be usable by the container
    - name: Install Libreswan to support L2TP in container
      include_tasks: libreswan-setup.yml
      when: streisand_l2tp_enabled

    # NOTE(@cpu): We use the `command` module with the `add-apt-repository`
    # command here because the `apt_repository` Ansible module at the time of
    # writing will error on the ubuntu-lxc repo in some instances if a mirror is
    # missing 32bit binary builds even though CI uses a 64bit architecture.
    #- name: Install LXC ppa
    #  command: add-apt-repository ppa:ubuntu-lxc/lxd-stable
    - name: Ensure consistent & clean apt state
      shell: "{{ item }}"
      with_items:
        - "apt-get clean"
        - "apt-get update"

    - name: "Remove old LXD from distro"
      apt:
        name: "lxd"
        state: "absent"

    - name: "Install snapd"
      apt:
        name: "snapd"

    - name: "Install LXD snap"
      command: "snap install lxd"

    - name: "Add LXD group"
      group:
        name: "lxd"
        system: "yes"

    - name: "Link the snap LXD commands to the default PATH"
      file:
        src: "/snap/bin/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        state: "link"
      with_items:
        - "lxc"
        - "lxd"

    - name: "Start lxd"
      command: "snap start lxd"

    - name: "Get some debug info"
      command: "snap info lxd"
      register: snap_debug

    - name: "Debug some debug info"
      debug:
        var: snap_debug.stdout_lines

    - name: "Get some more debug info"
      command: "snap services"
      register: snap_services_debug

    - name: "Debug more debug info"
      debug:
        var: snap_services_debug.stdout_lines

    - name: "What comamnds are we using?"
      command: "which lxd"
      register: which_debug

    - debug:
        var: which_debug

    - name: "What the hecko"
      command: "ls -la /usr/bin/lxd"
      register: ls_debug

    - debug:
        var: ls_debug.stdout_lines

    - name: "Double what the hecko"
      command: "ls -la /var/snap/lxd/common/lxd/"
      register: ls_2_debug

    - debug:
        var: ls_2_debug.stdout_lines


    #- name: "Restart LXD?"
    #command: "snap restart lxd"

    - name: "Collect ps aux output"
      shell: "ps aux | grep lxd"
      register: psaux_debug

    - debug:
        var: psaux_debug.stdout_lines

    - name: "Grab the LXD snap log"
      command: "cat /var/snap/lxd/common/lxd/logs/lxd.log"
      register: lxd_snap_log

    - debug:
        var: lxd_snap_log.stdout_lines

    - name: "Wait for the LXD socket?"
      wait_for:
        path: "/var/snap/lxd/common/lxd/unix.socket"
        state: present
        sleep: 5

    - name: "Grab the LXD snap log again"
      command: "cat /var/snap/lxd/common/lxd/logs/lxd.log"
      register: lxd_snap_log_two

    - debug:
        var: lxd_snap_log_two.stdout_lines

    # TODO(@cpu): Figure out what the right solution is here once things are
    # working. Use 0777 for now since everything is :trashfire:
    #- name: "Set liberal permissions on the lxd socket"
    #  file:
    #    path: /var/snap/lxd/common/lxd/unix.socket
    #    mode: "0777"

    - block:
        - name: lxd init config
          shell: lxd init --auto --storage-backend dir

        - name: lxd create network
          shell: lxc network create testbr0

        - name: lxd attach network to default profile
          shell: lxc network attach-profile testbr0 default eth0
      #ignore_erros: yes

    - name: "Restart LXD"
      command: "snap restart lxd"

    - name: pause
      pause:
        seconds: 10

    - name: Retrieve the Ubuntu Xenial AMD64 LXC image fingerprint
      uri:
        url: https://images.linuxcontainers.org/1.0/images/aliases/ubuntu/xenial/amd64
        return_content: yes
      register: xenial_fingerprint

    - name: Launch streisand container (this will take a while)
      lxd_container:
        name: streisand
        state: started
        source:
          type: image
          mode: pull
          server: https://images.linuxcontainers.org
          protocol: lxd
          # Use the retrieved alias to fetch the image
          alias: "{{ xenial_fingerprint['json']['metadata']['target'] }}"
        profiles: ["default"]
        config:
          security.privileged: "true"
        wait_for_ipv4_addresses: true
        timeout: 300
